#!/bin/bash

reset="\e[0m"
black="\e[30m"
red='\e[31m'
green="\e[32m"
yellow='\e[33m'
blue='\e[34m'
purple='\e[35m'
cyan='\e[36m'
white='\e[37m'


QUIET_MODE="1"
USAGE="alpine42 is a CLI wrapper tool around docker that runs an Alpine Linux container and mounts a host directory of your choice as a volume.\n\nusage:\talpine42 [-d <project_dir>] [-c <command>]\n\n"\
"-d : the directory to mount to the container (defaults to current directory)\n"\
"-c : the command you wish to execute inside the mounted directory (if not supplied, launches a bash shell inside the container)\n"\
"-v : switch flag to enable verbose output\n"\
"-h : show help\n"

while getopts ":vhd:c:" opt; do
  case $opt in
    v)
		QUIET_MODE="0"
		;;
	d)
    	PROJECT_DIR=$OPTARG
    	;;
	c)
		COMMAND=$OPTARG
		;;
	h)
		echo -e $USAGE
		exit 0
		;;
    \?)
		printf "${red}invalid option: -$OPTARG\n\n${reset}" >&2
		echo -e $USAGE
		exit 1
		;;
    :)
		printf "${red}error: option -$OPTARG requires an argument\n\n${reset}" >&2
		echo -e $USAGE
		exit 1
		;;
  esac
done

open -g -a Docker

while (! docker stats --no-stream > /dev/null 2>&1 ); do
  # docker takes a few seconds to initialize
	printf "${yellow}waiting for docker to launch...\n${reset}"
  	sleep 10
done

if [[ "$PROJECT_DIR" == "" ]] ; then
	printf "${yellow}WARNING: -d flag not provided, defaulting to cwd ($(pwd))${reset}\n"
	PROJECT_DIR=$(pwd)
fi

if [ ! -d $PROJECT_DIR ]; then
	printf "${red}error: provided path for -d flag does not exist${reset}\n\n"
	echo -e $USAGE
	exit 1
fi

PROJECT_DIR=$(grealpath $PROJECT_DIR)

printf "${green}building container image...${reset}\n"

if [ "$QUIET_MODE" -eq "1" ]; then
	docker build -t alpine42-img $ALPINE42_INSTALL > /dev/null
else
	docker build -t alpine42-img $ALPINE42_INSTALL
fi

printf "${green}running container...${reset}\n"

if [ -n "$COMMAND" ]; then
	docker run --rm -e QUIET_MODE=$QUIET_MODE -e COMMAND="$COMMAND" -v $PROJECT_DIR:/root/repo -it alpine42-img
else
	docker run --rm -e QUIET_MODE=$QUIET_MODE -e COMMAND="$COMMAND" -v $PROJECT_DIR:/root/repo -it alpine42-img bash -c "cd repo && bash"
	printf "${green}deleting container${reset}\n"
fi
